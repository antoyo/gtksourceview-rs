// This file was generated by gir (b010d34) from gir-files (71d73f0)
// DO NOT EDIT

use Mark;
use ffi;
use gdk;
use glib;
use glib::object::Downcast;
use glib::object::IsA;
use glib::signal::connect;
use glib::translate::*;
use glib_ffi;
use libc;
use std::boxed::Box as Box_;
use std::mem::transmute;

glib_wrapper! {
    pub struct MarkAttributes(Object<ffi::GtkSourceMarkAttributes>);

    match fn {
        get_type => || ffi::gtk_source_mark_attributes_get_type(),
    }
}

impl MarkAttributes {
    pub fn new() -> MarkAttributes {
        unsafe {
            from_glib_full(ffi::gtk_source_mark_attributes_new())
        }
    }
}

pub trait MarkAttributesExt {
    fn get_background(&self) -> Option<gdk::RGBA>;

    //fn get_gicon(&self) -> /*Ignored*/Option<gio::Icon>;

    fn get_icon_name(&self) -> Option<String>;

    //fn get_pixbuf(&self) -> /*Ignored*/Option<gdk_pixbuf::Pixbuf>;

    fn get_stock_id(&self) -> Option<String>;

    fn get_tooltip_markup(&self, mark: &Mark) -> Option<String>;

    fn get_tooltip_text(&self, mark: &Mark) -> Option<String>;

    //fn render_icon<P: IsA<gtk::Widget>>(&self, widget: &P, size: i32) -> /*Ignored*/Option<gdk_pixbuf::Pixbuf>;

    fn set_background(&self, background: &gdk::RGBA);

    //fn set_gicon<P: IsA</*Ignored*/gio::Icon>>(&self, gicon: &P);

    fn set_icon_name(&self, icon_name: &str);

    //fn set_pixbuf(&self, pixbuf: /*Ignored*/&gdk_pixbuf::Pixbuf);

    fn set_stock_id(&self, stock_id: &str);

    fn connect_query_tooltip_markup<F: Fn(&Self, &Mark) -> String + 'static>(&self, f: F) -> u64;

    fn connect_query_tooltip_text<F: Fn(&Self, &Mark) -> String + 'static>(&self, f: F) -> u64;
}

impl<O: IsA<MarkAttributes> + IsA<glib::object::Object>> MarkAttributesExt for O {
    fn get_background(&self) -> Option<gdk::RGBA> {
        unsafe {
            let mut background = gdk::RGBA::uninitialized();
            let ret = from_glib(ffi::gtk_source_mark_attributes_get_background(self.to_glib_none().0, background.to_glib_none_mut().0));
            if ret { Some(background) } else { None }
        }
    }

    //fn get_gicon(&self) -> /*Ignored*/Option<gio::Icon> {
    //    unsafe { TODO: call ffi::gtk_source_mark_attributes_get_gicon() }
    //}

    fn get_icon_name(&self) -> Option<String> {
        unsafe {
            from_glib_none(ffi::gtk_source_mark_attributes_get_icon_name(self.to_glib_none().0))
        }
    }

    //fn get_pixbuf(&self) -> /*Ignored*/Option<gdk_pixbuf::Pixbuf> {
    //    unsafe { TODO: call ffi::gtk_source_mark_attributes_get_pixbuf() }
    //}

    fn get_stock_id(&self) -> Option<String> {
        unsafe {
            from_glib_none(ffi::gtk_source_mark_attributes_get_stock_id(self.to_glib_none().0))
        }
    }

    fn get_tooltip_markup(&self, mark: &Mark) -> Option<String> {
        unsafe {
            from_glib_full(ffi::gtk_source_mark_attributes_get_tooltip_markup(self.to_glib_none().0, mark.to_glib_none().0))
        }
    }

    fn get_tooltip_text(&self, mark: &Mark) -> Option<String> {
        unsafe {
            from_glib_full(ffi::gtk_source_mark_attributes_get_tooltip_text(self.to_glib_none().0, mark.to_glib_none().0))
        }
    }

    //fn render_icon<P: IsA<gtk::Widget>>(&self, widget: &P, size: i32) -> /*Ignored*/Option<gdk_pixbuf::Pixbuf> {
    //    unsafe { TODO: call ffi::gtk_source_mark_attributes_render_icon() }
    //}

    fn set_background(&self, background: &gdk::RGBA) {
        unsafe {
            ffi::gtk_source_mark_attributes_set_background(self.to_glib_none().0, background.to_glib_none().0);
        }
    }

    //fn set_gicon<P: IsA</*Ignored*/gio::Icon>>(&self, gicon: &P) {
    //    unsafe { TODO: call ffi::gtk_source_mark_attributes_set_gicon() }
    //}

    fn set_icon_name(&self, icon_name: &str) {
        unsafe {
            ffi::gtk_source_mark_attributes_set_icon_name(self.to_glib_none().0, icon_name.to_glib_none().0);
        }
    }

    //fn set_pixbuf(&self, pixbuf: /*Ignored*/&gdk_pixbuf::Pixbuf) {
    //    unsafe { TODO: call ffi::gtk_source_mark_attributes_set_pixbuf() }
    //}

    fn set_stock_id(&self, stock_id: &str) {
        unsafe {
            ffi::gtk_source_mark_attributes_set_stock_id(self.to_glib_none().0, stock_id.to_glib_none().0);
        }
    }

    fn connect_query_tooltip_markup<F: Fn(&Self, &Mark) -> String + 'static>(&self, f: F) -> u64 {
        unsafe {
            let f: Box_<Box_<Fn(&Self, &Mark) -> String + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "query-tooltip-markup",
                transmute(query_tooltip_markup_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }

    fn connect_query_tooltip_text<F: Fn(&Self, &Mark) -> String + 'static>(&self, f: F) -> u64 {
        unsafe {
            let f: Box_<Box_<Fn(&Self, &Mark) -> String + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "query-tooltip-text",
                transmute(query_tooltip_text_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }
}

unsafe extern "C" fn query_tooltip_markup_trampoline<P>(this: *mut ffi::GtkSourceMarkAttributes, mark: *mut ffi::GtkSourceMark, f: glib_ffi::gpointer) -> *mut libc::c_char
where P: IsA<MarkAttributes> {
    callback_guard!();
    let f: &Box_<Fn(&P, &Mark) -> String + 'static> = transmute(f);
    f(&MarkAttributes::from_glib_none(this).downcast_unchecked(), &from_glib_none(mark)).to_glib_full()
}

unsafe extern "C" fn query_tooltip_text_trampoline<P>(this: *mut ffi::GtkSourceMarkAttributes, mark: *mut ffi::GtkSourceMark, f: glib_ffi::gpointer) -> *mut libc::c_char
where P: IsA<MarkAttributes> {
    callback_guard!();
    let f: &Box_<Fn(&P, &Mark) -> String + 'static> = transmute(f);
    f(&MarkAttributes::from_glib_none(this).downcast_unchecked(), &from_glib_none(mark)).to_glib_full()
}
