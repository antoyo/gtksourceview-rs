// This file was generated by gir (8343e00) from gir-files (71d73f0)
// DO NOT EDIT

use ffi;
use glib::object::IsA;
use glib::translate::*;

glib_wrapper! {
    pub struct Language(Object<ffi::GtkSourceLanguage>);

    match fn {
        get_type => || ffi::gtk_source_language_get_type(),
    }
}

pub trait LanguageExt {
    fn get_globs(&self) -> Vec<String>;

    fn get_hidden(&self) -> bool;

    fn get_id(&self) -> Option<String>;

    fn get_metadata(&self, name: &str) -> Option<String>;

    fn get_mime_types(&self) -> Vec<String>;

    fn get_name(&self) -> Option<String>;

    fn get_section(&self) -> Option<String>;

    fn get_style_fallback(&self, style_id: &str) -> Option<String>;

    fn get_style_ids(&self) -> Vec<String>;

    fn get_style_name(&self, style_id: &str) -> Option<String>;
}

impl<O: IsA<Language>> LanguageExt for O {
    fn get_globs(&self) -> Vec<String> {
        unsafe {
            FromGlibPtrContainer::from_glib_full(ffi::gtk_source_language_get_globs(self.to_glib_none().0))
        }
    }

    fn get_hidden(&self) -> bool {
        unsafe {
            from_glib(ffi::gtk_source_language_get_hidden(self.to_glib_none().0))
        }
    }

    fn get_id(&self) -> Option<String> {
        unsafe {
            from_glib_none(ffi::gtk_source_language_get_id(self.to_glib_none().0))
        }
    }

    fn get_metadata(&self, name: &str) -> Option<String> {
        unsafe {
            from_glib_none(ffi::gtk_source_language_get_metadata(self.to_glib_none().0, name.to_glib_none().0))
        }
    }

    fn get_mime_types(&self) -> Vec<String> {
        unsafe {
            FromGlibPtrContainer::from_glib_full(ffi::gtk_source_language_get_mime_types(self.to_glib_none().0))
        }
    }

    fn get_name(&self) -> Option<String> {
        unsafe {
            from_glib_none(ffi::gtk_source_language_get_name(self.to_glib_none().0))
        }
    }

    fn get_section(&self) -> Option<String> {
        unsafe {
            from_glib_none(ffi::gtk_source_language_get_section(self.to_glib_none().0))
        }
    }

    fn get_style_fallback(&self, style_id: &str) -> Option<String> {
        unsafe {
            from_glib_none(ffi::gtk_source_language_get_style_fallback(self.to_glib_none().0, style_id.to_glib_none().0))
        }
    }

    fn get_style_ids(&self) -> Vec<String> {
        unsafe {
            FromGlibPtrContainer::from_glib_full(ffi::gtk_source_language_get_style_ids(self.to_glib_none().0))
        }
    }

    fn get_style_name(&self, style_id: &str) -> Option<String> {
        unsafe {
            from_glib_none(ffi::gtk_source_language_get_style_name(self.to_glib_none().0, style_id.to_glib_none().0))
        }
    }
}
